MOV R1, 7
ADI R1, 7
ADI R1, 7
ADI R1, 7
ADI R1, 2			// I = 30;
MOV R2, 0		// dest 21
ADR R2, R1		// A = I
ADI R2, -7
ADI R2, -7
ADI R2, -7
ADI R2, -7
ADI R2, -7
ADI R2, -7
ADI R2, -7
ADI R2, -7
ADI R2, -4		// A - 60 == 0?
BRC 0			// I = 60, END
MOV R0, 0		// X = 0
MOV R3, 0		// chekc p8
ADR R3, R1
ADI R3, 1
LDR R3, R3		// B = MEM[I + 1]
LSH R3, 7			// B <<= 7
LSH R3, -7		// B >>= 7
MOV R2, 0
ADR R2, R1
ADI R2, 1			
LDR R2, R2		// A = MEM[I + 1]
LSH R2, -1		// A >>= 1
MOV R2, -8		// A = Q
XOR R2, R3		// A ^= B
BRC 2			// A == 0	; A != 0 exe following	
ADI R0, 7
ADI R0, 1			// X += 8
LDR R2, R1		// 2 dest. chek p4
LSH R2, -5		// A >>= 5
MOV R3, 0
ADR R3, R1
ADI R3, 1
LDR R3, R3		// B = MEM[I + 1]
LSH R3, -4		// B >>= 4
LSH R3, 4			// B <<= 4
XOR R2, R3		// A ^= B
MOV R2, -8		// A = Q
LDR R3, R1		// B = MEM[I]
LSH R3, 3			// B <<= 3
LSH R3, -7		// B >>= 7
XOR R2, R3		// A ^= B
BRC 3			// A == 0; A != 0 exe following
ADI R0, 4			// X += 4
MOV R2, 0		// 3 dest. check p2
ADR R2, R1
ADI R2, 1
LDR R2, R2		// A = MEM[I + 1]
LSH R2, -6		// A >>= 6
MOV R3, 0
ADR R3, R1
ADI R3, 1
LDR R3, R3		// B = MEM[I + 1]
LSH R3, -2		// B >>= 2
LSH R3, 6			// B <<= 6
XOR R2, R3		// A ^= B
LDR R3, R1		// B = MEM[I];
LSH R3, -6		// B >>= 6
LSH R3, 4			// B <<= 4
XOR R2, R3		// A ^= B
LDR R3, R1		// B = MEM[I]
LSH R3, 4			// B <<= 4
LSH R3, -7		// B >>= 7
LSH R3, 4			// B <<= 4
XOR R2, R3		// A ^= B
MOV R2, -8		// A = Q
LDR R3, R1		// B = MEM[I]
LSH R3, 5			// B <<= 5;
LSH R3, -7		// B >>= 7
XOR R2, R3		// A ^= B
BRC 4			// A == 0; A != 0 exe following
ADI R0, 2
MOV R2, 0		// 4 dest. check p1
ADR R2, R1
ADI R2, 1
LDR R2, R2		// A = MEM[I + 1]
LSH R2, -7		// A >>= 7
MOV R3, 0
ADR R3, R1
ADI R3, 1
LDR R3, R3		// B = MEM[I+ 1]
LSH R3, -5		// B >>= 5
LSH R3, 7			// B <<= 7
XOR R2, R3		// A ^= B
MOV R3, 0
ADR R3, R1
ADI R3, 1
LDR R3, R3		// B = MEM[I + 1]
LSH R3, 4			// B <<= 4
LSH R3, -7		// B >>= 7
LSH R3, 6			// B <<= 6
XOR R2, R3		// A ^= B
MOV R3, 0
ADR R3, R1
ADI R3, 1
LDR R3, R3		// B = MEM[I + 1]
LSH R3, 6			// B <<= 6
LSH R3, -7		// B >>= 7
LSH R3, 5			// B <<= 5
XOR R2, R3		// A ^= B
LDR R3, R1		// B = MEM[I]
LSH R3, -7		// B >>= 7
LSH R3, 4			// B <<= 4
XOR R2, R3		// A ^= B
LDR R3, R1		// B = MEM[I]
LSH R3, 2			// B <<= 2
LSH R3, -7		// B >>= 7
LSH R3, 3			// B <<= 3
XOR R2, R3		// A ^= B
LDR R3, R1		// B = MEM[I]
LSH R3, 4			// B <<= 4
LSH R3, -7		// B >>= 7
LSH R3, 2			// B <<= 2
XOR R2, R3		// A ^= B
MOV R2, -8		// A = Q
LDR R3, R1		// B = MEM[I]
LSH R3, 6			// B <<= 6
LSH R3, -7		// B >>= 7
XOR R2, R3
BRC 5			// A == 0; A !=0 exe following
ADI R0, 1			// X += 1
LDR R2, R1		// 5 dest. check p0		A = MEM[I]
MOV R3, 0
ADR R3, R1
ADI R3, 1
LDR R3, R3		// B = MEM[I + 1]
LSH R3, -1		// B >>= 1
XOR R2, R3		// A ^= B
MOV R2, -8		// A = Q
MOV R3, 0
ADR R3, R1
ADI R3, 1
LDR R3, R3		// B = MEM[I + 1]
LSH R3, 7			// B <<= 7
LSH R3, -7		// B >>= 7
XOR R2, R3		// A ^= B
BRC 6			// A == 0,  go to DED
MOV R2, 0
ADR R2, R0		// A = X
ADI R2, -8
ADI R2, -7		// A - 15 == 0?
BRC 8
MOV R2, 0
ADR R2, R0		// A = X
ADI R2, -7
ADI R2, -7		// A - 14 == 0?
BRC 9
MOV R2, 0
ADR R2, R0		// A = X
ADI R2, -7
ADI R2, -6		// A - 13 == 0?
BRC 10
MOV R2, 0
ADR R2, R0		// A = X
ADI R2, -7
ADI R2, -5		// A - 12 == 0?
BRC 11
MOV R2, 0
ADR R2, R0		// A = X
ADI R2, -6
ADI R2, -5		// A - 11 == 0?
BRC 12	
MOV R2, 0
ADR R2, R0		// A = X
ADI R2, -5
ADI R2, -5		// A - 10 == 0?
BRC 13
MOV R2, 0
ADR R2, R0		// A = X
ADI R2, -4
ADI R2, -5		// A - 9 == 0?
BRC 14
MOV R2, 0
ADR R2, R0		// A = X
ADI R2, -7		// A - 7 == 0?
BRC 15
MOV R2, 0
ADR R2, R0		// A = X
ADI R2, -6		// A - 6 == 0?
BRC 16
MOV R2, 0
ADR R2, R0		// A = X
ADI R2, -5		// A - 5 == 0?
BRC 17	
MOV R2, 0
ADR R2, R0		// A = X
ADI R2, -3		// A - 3 == 0?
BRC 18
MOV R2, 0
BRC 7			// if no case match. parity error. just exit
MOV R2, 1		// 8 dest. A == 15	
LSH R2, 7			// A <<= 7
MOV R3, 0
ADR R3, R1
ADI R3, 1
LDR R3, R3		// B = MEM[I + 1]
XOR R2, R3		// A ^= B
MOV R3, 0
ADR R3, R1
ADI R3, 1			// B = I + 1
STR R2, R3		// MEM[I + 1] = A
MOV R2, 0		// for BRC purpose
BRC 7			// correction done, exit to 7
MOV R2, 1		// 9 dest
LSH R2, 6			// A <<= 6
MOV R3, 0
ADR R3, R1
ADI R3, 1
LDR R3, R3		// B = MEM[I + 1]
XOR R2, R3		// A ^= B
MOV R3, 0
ADR R3, R1
ADI R3, 1			// B = I + 1
STR R2, R3		// MEM[I + 1] = A
MOV R2, 0
BRC 7			// exit to 7	
MOV R2, 1		// 10 dest		
LSH R2, 5			
MOV R3, 0
ADR R3, R1
ADI R3, 1
LDR R3, R3		
XOR R2, R3		
MOV R3, 0
ADR R3, R1
ADI R3, 1			
STR R2, R3		
MOV R2, 0
BRC 7			
MOV R2, 1		// 11 dest		
LSH R2, 4			
MOV R3, 0
ADR R3, R1
ADI R3, 1
LDR R3, R3		
XOR R2, R3		
MOV R3, 0
ADR R3, R1
ADI R3, 1			
STR R2, R3		
MOV R2, 0
BRC 7
MOV R2, 1		// 12 dest		
LSH R2, 3			
MOV R3, 0
ADR R3, R1
ADI R3, 1
LDR R3, R3		
XOR R2, R3		
MOV R3, 0
ADR R3, R1
ADI R3, 1			
STR R2, R3		
MOV R2, 0
BRC 7
MOV R2, 1		// 13 dest		
LSH R2, 2			
MOV R3, 0
ADR R3, R1
ADI R3, 1
LDR R3, R3		
XOR R2, R3		
MOV R3, 0
ADR R3, R1
ADI R3, 1			
STR R2, R3		
MOV R2, 0
BRC 7
MOV R2, 1		// 14 dest		
LSH R2, 1			
MOV R3, 0
ADR R3, R1
ADI R3, 1
LDR R3, R3		
XOR R2, R3		
MOV R3, 0
ADR R3, R1
ADI R3, 1			
STR R2, R3		
MOV R2, 0
BRC 7
MOV R2, 1		// 15 dest
LSH R2, 7			// A <<= 7
LDR R3, R1		// B = MEM[I]
XOR R2, R3		// A ^= B
STR R2, R1		// MEM[I] = A
MOV R2, 0
BRC 7
MOV R2, 1		// 16 dest			
LSH R2, 6			
LDR R3, R1		
XOR R2, R3		
STR R2, R1
MOV R2, 0		
BRC 7
MOV R2, 1		// 17 dest			
LSH R2, 5			
LDR R3, R1		
XOR R2, R3		
STR R2, R1
MOV R2, 0		
BRC 7
MOV R2, 1		// 18 dest			
LSH R2, 3			
LDR R3, R1		
XOR R2, R3		
STR R2, R1
MOV R2, 0		
BRC 7
MOV R2, 1		// 7 dest. corret bit exit here. load upper hafl here
LSH R2, 6			// A <<= 6
MOV R3, 0
ADR R3, R1
ADI R3, 1
LDR R3, R3		// B = MEM[I + 1]
LSH R3, -5		// B >>= 5
XOR R2, R3		// A ^= B
MOV R3, 0
ADR R3, R1
ADI R3, -8
ADI R3, -8
ADI R3, -8
ADI R3, -5		// B = I - 29
STR R2, R3		// MEM[I - 29] = A
MOV R2, 0
BRC 19			// go to load lower half
MOV R2, 0		// 6 dest. DED goes here
ADR R2, R0		// A = X
BRC 20			// A == 0, message clean
MOV R2, 2		// A != 0, DED		A = 2
LSH R2, 6			// A <<= 6
MOV R3, 0
ADR R3, R1
ADI R3, 1
LDR R3, R3		// B = MEM[I + 1]
LSH R3, -5		// B >>= 5
XOR R2, R3		// A ^= B;
MOV R3, 0
ADR R3, R1
ADI R3, -8
ADI R3, -8
ADI R3, -8
ADI R3, -5		// B = I - 29
STR R2, R3		// MEM[I - 29] = A
MOV R2, 0
BRC 19			// go to load lower half
MOV R2, 0		// 20 dest
ADR R2, R1
ADI R2, 1
LDR R2, R2		// A = MEM[I + 1]
LSH R2, -5		// A >>= 5
MOV R3, 0
ADR R3, R1
ADI R3, -8
ADI R3, -8
ADI R3, -8
ADI R3, -5		// B = I - 29
STR R2, R3		// MEM[I - 29] = A.	 Then directly go to load lower half
MOV R2, 0		// 19 dest. load lower half
ADR R2, R1
ADI R2, 1
LDR R2, R2		// A = MEM[I + 1]
LSH R2, -1		// A >>= 1
LSH R2, 4			// A <<= 4
LDR R3, R1		// B = MEM[I]
LSH R3, -5		// B >>= 5
LSH R3, 1			// B <<= 1
XOR R2, R3		// A ^= B
LDR R3, R1		// B = MEM[I]
LSH R3, 4			// B <<= 4
LSH R3, -7		// B >>= 7
XOR R2, R3		// A ^= B
MOV R3, 0
ADR R3, R1
ADI R3, -8
ADI R3, -8
ADI R3, -8
ADI R3, -6		// B = I - 30
STR R2, R3		// MEM[I - 30] = A
ADI R1, 2			// I = I + 2
MOV R2, 0		
BRC 21			// go back to loop